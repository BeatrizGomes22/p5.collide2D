/*
Repo: https://github.com/bmoren/p5.collide2D/
Created by http://benmoren.com
Some functions and code modified version from http://www.jeffreythompson.org/collision-detection
Version 0.7 | Nov 28th, 2018
CC BY-NC-SA 4.0
*/
console.log("### p5.collide ###"),p5.prototype._collideDebug=!1,p5.prototype.collideDebug=function(t){_collideDebug=t},p5.prototype.collideRectRect=function(t,o,e,i,l,r,n,c){return l<=t+e&&t<=l+n&&r<=o+i&&o<=r+c},p5.prototype.collideRectRectVector=function(t,o,e,i){return p5.prototype.collideRectRect(t.x,t.y,o.x,o.y,e.x,e.y,i.x,i.y)},p5.prototype.collideRectCircle=function(t,o,e,i,l,r,n){var c=l,p=r;return l<t?c=t:t+e<l&&(c=t+e),r<o?p=o:o+i<r&&(p=o+i),this.dist(l,r,c,p)<=n/2},p5.prototype.collideRectCircleVector=function(t,o,e,i){return p5.prototype.collideRectCircle(t.x,t.y,o.x,o.y,e.x,e.y,i)},p5.prototype.collideCircleCircle=function(t,o,e,i,l,r){return this.dist(t,o,i,l)<=e/2+r/2},p5.prototype.collideCircleCircleVector=function(t,o,e,i){return p5.prototype.collideCircleCircle(t.x,t.y,o,e.x,e.y,i)},p5.prototype.collidePointCircle=function(t,o,e,i,l){return this.dist(t,o,e,i)<=l/2},p5.prototype.collidePointCircleVector=function(t,o,e){return p5.prototype.collidePointCircle(t.x,t.y,o.x,o.y,e)},p5.prototype.collidePointEllipse=function(t,o,e,i,l,r){var n=l/2,c=r/2;if(e+n<t||t<e-n||i+c<o||o<i-c)return!1;var p=t-e,y=o-i,d=c*this.sqrt(this.abs(n*n-p*p))/n;return y<=d&&-d<=y},p5.prototype.collidePointEllipseVector=function(t,o,e){return p5.prototype.collidePointEllipse(t.x,t.y,o.x,o.y,e.x,e.y)},p5.prototype.collidePointRect=function(t,o,e,i,l,r){return e<=t&&t<=e+l&&i<=o&&o<=i+r},p5.prototype.collidePointRectVector=function(t,o,e){return p5.prototype.collidePointRect(t.x,t.y,o.x,o.y,e.x,e.y)},p5.prototype.collidePointLine=function(t,o,e,i,l,r,n){var c=this.dist(t,o,e,i),p=this.dist(t,o,l,r),y=this.dist(e,i,l,r);return void 0===n&&(n=.1),y-n<=c+p&&c+p<=y+n},p5.prototype.collidePointLineVector=function(t,o,e,i){return p5.prototype.collidePointLine(t.x,t.y,o.x,o.y,e.x,e.y,i)},p5.prototype.collideLineCircle=function(t,o,e,i,l,r,n){var c=this.collidePointCircle(t,o,l,r,n),p=this.collidePointCircle(e,i,l,r,n);if(c||p)return!0;var y=t-e,d=o-i,u=this.sqrt(y*y+d*d),s=((l-t)*(e-t)+(r-o)*(i-o))/this.pow(u,2),x=t+s*(e-t),f=o+s*(i-o);return!!this.collidePointLine(x,f,t,o,e,i)&&(this._collideDebug&&this.ellipse(x,f,10,10),y=x-l,d=f-r,this.sqrt(y*y+d*d)<=n/2)},p5.prototype.collideLineCircleVector=function(t,o,e,i){return p5.prototype.collideLineCircle(t.x,t.y,o.x,o.y,e.x,e.y,i)},p5.prototype.collideLineLine=function(t,o,e,i,l,r,n,c,p){var y,d,u=((n-l)*(o-r)-(c-r)*(t-l))/((c-r)*(e-t)-(n-l)*(i-o)),s=((e-t)*(o-r)-(i-o)*(t-l))/((c-r)*(e-t)-(n-l)*(i-o));return 0<=u&&u<=1&&0<=s&&s<=1?((this._collideDebug||p)&&(y=t+u*(e-t),d=o+u*(i-o)),this._collideDebug&&this.ellipse(y,d,10,10),!p||{x:y,y:d}):!!p&&{x:!1,y:!1}},p5.prototype.collideLineLineVector=function(t,o,e,i,l){return p5.prototype.collideLineLine(t.x,t.y,o.x,o.y,e.x,e.y,i.x,i.y,l)},p5.prototype.collideLineRect=function(t,o,e,i,l,r,n,c,p){var y,d,u,s,x;return p?x={left:y=this.collideLineLine(t,o,e,i,l,r,l,r+c,!0),right:d=this.collideLineLine(t,o,e,i,l+n,r,l+n,r+c,!0),top:u=this.collideLineLine(t,o,e,i,l,r,l+n,r,!0),bottom:s=this.collideLineLine(t,o,e,i,l,r+c,l+n,r+c,!0)}:(y=this.collideLineLine(t,o,e,i,l,r,l,r+c),d=this.collideLineLine(t,o,e,i,l+n,r,l+n,r+c),u=this.collideLineLine(t,o,e,i,l,r,l+n,r),s=this.collideLineLine(t,o,e,i,l,r+c,l+n,r+c)),!!(y||d||u||s)&&(!p||x)},p5.prototype.collideLineRectVector=function(t,o,e,i,l){return p5.prototype.collideLineRect(t.x,t.y,o.x,o.y,e.x,e.y,i.x,i.y,l)},p5.prototype.collidePointPoly=function(t,o,e){for(var i=!1,l=0,r=0;r<e.length;r++){(l=r+1)===e.length&&(l=0);var n=e[r],c=e[l];(n.y>o&&c.y<o||n.y<o&&c.y>o)&&t<(c.x-n.x)*(o-n.y)/(c.y-n.y)+n.x&&(i=!i)}return i},p5.prototype.collidePointPolyVector=function(t,o){return p5.prototype.collidePointPoly(t.x,t.y,o)},p5.prototype.collideCirclePoly=function(t,o,e,i,l){void 0===l&&(l=!1);for(var r=0,n=0;n<i.length;n++){(r=n+1)===i.length&&(r=0);var c=i[n],p=i[r];if(this.collideLineCircle(c.x,c.y,p.x,p.y,t,o,e))return!0}if(!0===l&&this.collidePointPoly(t,o,i))return!0;return!1},p5.prototype.collideCirclePolyVector=function(t,o,e,i){return p5.prototype.collideCirclePoly(t.x,t.y,o,e,i)},p5.prototype.collideRectPoly=function(t,o,e,i,l,r){null==r&&(r=!1);for(var n=0,c=0;c<l.length;c++){(n=c+1)===l.length&&(n=0);var p=l[c],y=l[n];if(this.collideLineRect(p.x,p.y,y.x,y.y,t,o,e,i))return!0;if(!0===r)if(this.collidePointPoly(t,o,l))return!0}return!1},p5.prototype.collideRectPolyVector=function(t,o,e,i){return p5.prototype.collideRectPoly(t.x,t.y,o.x,o.y,e,i)},p5.prototype.collideLinePoly=function(t,o,e,i,l){for(var r=0,n=0;n<l.length;n++){(r=n+1)===l.length&&(r=0);var c=l[n].x,p=l[n].y,y=l[r].x,d=l[r].y;if(this.collideLineLine(t,o,e,i,c,p,y,d))return!0}return!1},p5.prototype.collideLinePolyVector=function(t,o,e){return p5.prototype.collideLinePoly(t.x,t.y,o.x,o.y,e)},p5.prototype.collidePolyPoly=function(t,o,e){void 0===e&&(e=!1);for(var i=0,l=0;l<t.length;l++){(i=l+1)===t.length&&(i=0);var r=t[l],n=t[i],c=this.collideLinePoly(r.x,r.y,n.x,n.y,o);if(c)return!0;if(!0===e&&(c=this.collidePointPoly(o[0].x,o[0].y,t)))return!0}return!1},p5.prototype.collidePolyPolyVector=function(t,o,e){return p5.prototype.collidePolyPoly(t,o,e)},p5.prototype.collidePointTriangle=function(t,o,e,i,l,r,n,c){var p=this.abs((l-e)*(c-i)-(n-e)*(r-i));return this.abs((e-t)*(r-o)-(l-t)*(i-o))+this.abs((l-t)*(c-o)-(n-t)*(r-o))+this.abs((n-t)*(i-o)-(e-t)*(c-o))===p},p5.prototype.collidePointTriangleVector=function(t,o,e,i){return p5.prototype.collidePointTriangle(t.x,t.y,o.x,o.y,e.x,e.y,i.x,i.y)},p5.prototype.collidePointPoint=function(t,o,e,i,l){return void 0===l&&(l=0),this.dist(t,o,e,i)<=l},p5.prototype.collidePointPointVector=function(t,o,e){return p5.prototype.collidePointPoint(t.x,t.y,o.x,o.y,e)},p5.prototype.collidePointArc=function(t,o,e,i,l,r,n,c){void 0===c&&(c=0);var p=this.createVector(t,o),y=this.createVector(e,i),d=this.createVector(l,0).rotate(r),u=p.copy().sub(y);if(p.dist(y)<=l+c){var s=d.dot(u),x=d.angleBetween(u);if(0<s&&x<=n/2&&-n/2<=x)return!0}return!1},p5.prototype.collidePointArcVector=function(t,o,e,i,l,r){return p5.prototype.collidePointArc(t.x,t.y,o.x,o.y,e,i,l,r)};